/*
 * Zed Attack Proxy (ZAP) and its related class files.
 *
 * ZAP is an HTTP/HTTPS proxy for assessing web application security.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.zaproxy.zap.extension.ascan;

import org.apache.log4j.Logger;
import org.parosproxy.paros.core.scanner.AbstractAppPlugin;
import org.parosproxy.paros.core.scanner.Alert;
import org.parosproxy.paros.core.scanner.Category;
import org.parosproxy.paros.network.HttpMessage;

public class DummyVulnerability extends AbstractAppPlugin {


	private static Logger log = Logger.getLogger(DummyVulnerability.class);

	public DummyVulnerability()
	{
	}

	@Override
	public int getId() {
		return 60110;
	}

	@Override
	public String getName() {
		return "DummyVulnerability";
	}

	@Override
	public String[] getDependency() {
		return null;
	}

	@Override
	public String getDescription() {
		return "Looks for the string 'DummyVulnerability' in the body of a response.";
	}

	@Override
	public int getCategory() {
		return Category.MISC;
	}

	@Override
	public String getSolution() {
		return "No solution - just for testing purposes.";
	}

	@Override
	public String getReference() {
		return "No reference - just for testing purposes.";
	}

	@Override
	public void init() {

	}

	@Override
	public int getRisk() {
		return Alert.RISK_HIGH;
	}

	@Override
	public int getCweId() {
		// The CWE id
		return 0;
	}

	@Override
	public int getWascId() {
		// The WASC ID
		return 0;
	}

	@Override
	public void scan() {
		try {
			HttpMessage msg = getNewMsg();
			this.sendAndReceive(msg);

			if(msg == null)	{
				return;
			}

			String responseBody = msg.getResponseBody().toString();

			if(responseBody.contains("DummyVulnerability")) {
				String uri = msg.getRequestHeader().getURI().toString();
				bingo(Alert.RISK_HIGH, 1, uri, "NoParams", "DummyVulnerabilityAttack", "Odder Info", msg);
			}
		} catch (Exception e) {
			log.error("Exception ocurred in DummyVulnerability plugin: " + e.getMessage());
		}
	}
}
